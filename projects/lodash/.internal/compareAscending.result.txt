FAIL projects/lodash/.internal/compareAscending.test.ts
  compareAscending
    ✕ should return 1 when value is greater than other (4 ms)
    ✓ should return -1 when value is smaller than other (1 ms)
    ✓ should return 0 when value is equal to other
    ✓ should return 1 when value is null and other is defined and reflexive
    ✓ should return -1 when value is defined and reflexive and other is null
    ✕ should return 0 when value is undefined and reflexive
    ✓ should return 0 when both value and other are undefined (1 ms)
    ✓ should return 1 when value is symbol and other is defined and reflexive
    ✕ should return -1 when value is defined and reflexive and other is symbol
    ✕ should return -1 when value is symbol, other is defined and reflexive, and value is smaller than other (1 ms)
    ✕ should return 1 when value is string and other is defined and reflexive, and value is greater than other (1 ms)
    ✓ should return 1 when value is string, other is defined and reflexive, and value.localeCompare(other) is greater than 0 (8 ms)
    ✕ should return -1 when value is undefined, other is reflexive, and other is not null or symbol

  ● compareAscending › should return 1 when value is greater than other

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: -1

       6 |     const value = 5
       7 |     const other = 3
    >  8 |     expect(compareAscending(value, other)).toBe(1)
         |                                            ^
       9 |   })
      10 |
      11 |   it('should return -1 when value is smaller than other', () => {

      at Object.toBe (projects/lodash/.internal/compareAscending.test.ts:8:44)

  ● compareAscending › should return 0 when value is undefined and reflexive

    expect(received).toBe(expected) // Object.is equality

    Expected: 0
    Received: 1

      39 |     const value = undefined
      40 |     const other = 5
    > 41 |     expect(compareAscending(value, other)).toBe(0)
         |                                            ^
      42 |   })
      43 |
      44 |   // Additional test case for edge case

      at Object.toBe (projects/lodash/.internal/compareAscending.test.ts:41:44)

  ● compareAscending › should return -1 when value is defined and reflexive and other is symbol

    TypeError: Cannot convert a Symbol value to a number

      23 |     const val = typeof value === 'string'
      24 |       ? value.localeCompare(other)
    > 25 |       : -other
         |         ^
      26 |
      27 |     if ((!othIsNull && !othIsSymbol && !valIsSymbol && val > 0) ||
      28 |       (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||

      at compareAscending (projects/lodash/.internal/compareAscending.ts:25:9)
      at Object.<anonymous> (projects/lodash/.internal/compareAscending.test.ts:62:28)

  ● compareAscending › should return -1 when value is symbol, other is defined and reflexive, and value is smaller than other

    expect(received).toBe(expected) // Object.is equality

    Expected: -1
    Received: 1

      67 |     const value = Symbol()
      68 |     const other = 'abc'
    > 69 |     expect(compareAscending(value, other)).toBe(-1)
         |                                            ^
      70 |   })
      71 |
      72 |   // Additional test case for edge case

      at Object.toBe (projects/lodash/.internal/compareAscending.test.ts:69:44)

  ● compareAscending › should return 1 when value is string and other is defined and reflexive, and value is greater than other

    TypeError: Cannot convert a Symbol value to a string
        at String.localeCompare (<anonymous>)

      22 |
      23 |     const val = typeof value === 'string'
    > 24 |       ? value.localeCompare(other)
         |               ^
      25 |       : -other
      26 |
      27 |     if ((!othIsNull && !othIsSymbol && !valIsSymbol && val > 0) ||

      at localeCompare (projects/lodash/.internal/compareAscending.ts:24:15)
      at Object.<anonymous> (projects/lodash/.internal/compareAscending.test.ts:76:28)

  ● compareAscending › should return -1 when value is undefined, other is reflexive, and other is not null or symbol

    expect(received).toBe(expected) // Object.is equality

    Expected: -1
    Received: 1

      88 |     const value = undefined
      89 |     const other = 5
    > 90 |     expect(compareAscending(value, other)).toBe(-1)
         |                                            ^
      91 |   })
      92 | })
      93 |

      at Object.toBe (projects/lodash/.internal/compareAscending.test.ts:90:44)

Test Suites: 1 failed, 1 total
Tests:       6 failed, 7 passed, 13 total
Snapshots:   0 total
Time:        0.615 s
Ran all test suites matching /projects\/lodash\/.internal\/compareAscending.test.ts/i.
